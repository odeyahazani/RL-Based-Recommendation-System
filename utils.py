# -*- coding: utf-8 -*-
"""utils.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oyz5SvJYhqbikf2amrCvZ31FqOAt64a3
"""

import random, os
import numpy as np, torch, yaml
from pathlib import Path
from datetime import datetime
from torch.utils.tensorboard import SummaryWriter

# ---------- Utilities ----------
def seed_everything(seed: int):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(seed)

def get_device(req: str = "auto"):
    if req == "cpu":  return torch.device("cpu")
    if req == "cuda": return torch.device("cuda")
    return torch.device("cuda" if torch.cuda.is_available() else "cpu")

class AttrDict(dict):
    """dot-notation access to dictionary attributes (recursively)."""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for k, v in self.items():
            if isinstance(v, dict):
                self[k] = AttrDict(v)

    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, k, v):
        self[k] = v

    @staticmethod
    def from_yaml(path):
        import yaml
        with open(path, "r") as f:
            return AttrDict(yaml.safe_load(f))


# ---------- TensorBoard ----------
class TBLogger:
    def __init__(self, cfg):
        ts = datetime.now().strftime("%Y%m%d-%H%M%S")
        log_dir = Path(cfg.logging.log_dir) / ts
        self.enabled = cfg.logging.enable
        self.writer  = SummaryWriter(log_dir=log_dir) if self.enabled else None
    def scalar(self, name, value, step):
        if self.writer: self.writer.add_scalar(name, value, step)
    def close(self):
        if self.writer: self.writer.close()

