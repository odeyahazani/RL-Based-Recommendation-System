# -*- coding: utf-8 -*-
"""sum_tree.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ruml4Qa82k_glxhckih6hABHtwb22wfA
"""

# movierec_rl/sum_tree.py
import numpy as np

class SumTree:
    """Array-based binary tree supporting O(log N) add & sample."""
    def __init__(self, capacity: int):
        assert capacity > 0 and (capacity & (capacity - 1) == 0), \
            "capacity must be positive power of 2"
        self.capacity = capacity
        self.tree     = np.zeros(2 * capacity, dtype=np.float32)
        self.data_idx = 0

    # ----- write -----
    def add(self, priority: float):
        idx = self.data_idx + self.capacity
        self.update(idx, priority)
        self.data_idx = (self.data_idx + 1) % self.capacity
        return idx                         # leaf-index ← משמש לאחסון מעבר

    # ----- read -----
    def sample(self, mass: float) -> int:
        """Traverse tree so that cumulative sum ≥ mass; returns leaf index."""
        idx = 1                            # root
        while idx < self.capacity:         # עד שיגיע לעלה
            left = idx << 1
            if mass <= self.tree[left]:
                idx = left
            else:
                mass -= self.tree[left]
                idx = left + 1
        return idx

    # ----- update -----
    def update(self, idx: int, priority: float):
        change = priority - self.tree[idx]
        while idx:
            self.tree[idx] += change
            idx >>= 1

    # ----- helpers -----
    @property
    def total(self) -> float:
        return self.tree[1]